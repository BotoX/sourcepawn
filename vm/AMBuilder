# vim: set sts=2 ts=8 sw=2 tw=99 et ft=python:
import os

Includes = [
  os.path.join(SP.amtl, 'amtl'),
  os.path.join(SP.amtl),
  os.path.join(builder.currentSourcePath),
  os.path.join(builder.currentSourcePath, '..', 'third_party'),

  # The include path for SP v2 stuff.
  os.path.join(builder.sourcePath, 'sourcepawn', 'include'),
]

if builder.compiler.like('gcc'):
  builder.compiler.cflags += [
    '-Wno-invalid-offsetof',
  ]
  builder.compiler.cxxflags += ['-fno-rtti']
if builder.compiler.like('clang'):
  builder.compiler.cxxflags += [
    '-Wno-implicit-exception-spec-mismatch',
  ]
if builder.compiler.cxx.name == 'gcc':
  # ABI restrictions...
  builder.compiler.cxxflags += [
    '-Wno-delete-non-virtual-dtor',
  ]

# Build the static library.
library = builder.compiler.StaticLibrary('sourcepawn')
library.compiler.includes += Includes

library.sources += [
  'api.cpp',
  'base-context.cpp',
  'code-allocator.cpp',
  'compiled-function.cpp',
  'environment.cpp',
  'file-utils.cpp',
  'md5/md5.cpp',
  'opcodes.cpp',
  'plugin-context.cpp',
  'plugin-runtime.cpp',
  'scripted-invoker.cpp',
  'stack-frames.cpp',
  'smx-v1-image.cpp',
  'watchdog_timer.cpp',
  'pool-allocator.cpp',
  'method-verifier.cpp',
  'method-info.cpp',
  'interpreter.cpp',
  'runtime-helpers.cpp',
]

has_jit = SP.arch in ['x86'] and builder.compiler.cxx.name != 'emscripten'

if has_jit:
  library.sources += [
    'code-stubs.cpp',
    'jit.cpp',
    'linking.cpp',
  ]
  library.compiler.defines += ['SP_HAS_JIT']

if has_jit and SP.arch == 'x86':
  library.sources += [
    'x86/assembler-x86.cpp',
    'x86/code-stubs-x86.cpp',
    'x86/jit_x86.cpp',
  ]

libsourcepawn = builder.Add(library)

# Build the dynamically-linked library.
dll = Root.Library(builder, 'sourcepawn.jit.x86')
dll.compiler.includes += Includes
dll.compiler.linkflags[0:0] = [
  libsourcepawn.binary,
  SP.zlib,
]
dll.sources += [
  'dll_exports.cpp'
]

if builder.target_platform == 'linux':
  dll.compiler.postlink += ['-lpthread', '-lrt']

SP.libsourcepawn = builder.Add(dll)

def configure_like_shell(name):
  prog = Root.Program(builder, name)
  prog.compiler.includes += Includes
  prog.compiler.linkflags[0:0] = [
    libsourcepawn.binary,
    SP.zlib,
  ]
  if prog.compiler.like('gcc'):
    prog.compiler.linkflags += ['-lstdc++']
  if builder.target_platform == 'linux':
    prog.compiler.postlink += ['-lpthread', '-lrt']
  return prog

# Build the debug shell.
shell = configure_like_shell('spshell')
shell.sources += [
  'shell.cpp'
]

SP.spshell = builder.Add(shell)

# Build the verifier.
verifier = configure_like_shell('verifier')
verifier.sources += [
  '../tools/verifier/verifier.cpp',
]
builder.Add(verifier)

# Build the emscripten C wrapper.
if shell.compiler.like('emscripten'):
  emscripten = configure_like_shell('sourcepawn-js')
  emscripten.sources += [
    'emscripten.cpp'
  ]

  # Add space for registering js-based natives
  emscripten.compiler.linkflags += [
    '-s', 'NODEJS_CATCH_EXIT=0',
    '-s', 'RESERVED_FUNCTION_POINTERS=128',
    '-s', 'EXTRA_EXPORTED_RUNTIME_METHODS=["FS"]',
  ];

  builder.Add(emscripten)
